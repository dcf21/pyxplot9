# parser_data.py
#
# The code in this file is part of PyXPlot
# <http://www.pyxplot.org.uk>
#
# Copyright (C) 2006-2012 Dominic Ford <coders@pyxplot.org.uk>
#               2008-2012 Ross Church
#
# $Id$
#
# PyXPlot is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
#
# You should have received a copy of the GNU General Public License along with
# PyXPlot; if not, write to the Free Software Foundation, Inc., 51 Franklin
# Street, Fifth Floor, Boston, MA  02110-1301, USA

# ----------------------------------------------------------------------------

# Generate specification of commands that PyXPlot recognises

def sanitize(instr):
  outstr = ""
  for i in range(len(instr)):
    if instr[i].isalnum(): outstr+=instr[i]
  return outstr

f_in = open("buildScripts/parser_data.dat","r")

# Output C files containing command definitions

f_h  = open("src/parser/cmdList.h","w")
f_c  = open("src/parser/cmdList.c","w")
includeKeys = {}

f_h.write("""// This file autogenerated by parser_data.py

#ifndef _CMDLIST_H
#define _CMDLIST_H 1

extern char ppl_cmdList[];
""")

f_c.write("""// This file autogenerated by parser_data.py

char ppl_cmdList[] = "\\
""")

# Loop through command definitions

linecount = 0
for line in f_in:
  linecount+=1
  line = line.strip();
  if len(line)<1: continue
  if line.startswith("#"): continue

  outline        = ""
  directive      = "undefined"
  setoption      = ""
  stack          = []
  stack_varnames = []
  listsizes      = []
  varnames       = {"directive":0 , "editno":1, "set_option":2}
  varcount       = len(varnames)
  words = line.split()
  for word in words:
    if word in ["=","(","~",")","{","}","<","|",">","["]:
      outline += "%s "%word
      if word=="[":
        stack.append(varcount)
        stack_varnames.append(varnames)
        varcount=0
        varnames={}
      continue
    parts = word[1:].split(":")
    parts[0] = word[0]+parts[0]
    subparts = parts[0].split("@")
    if len(parts)<2:
      parts.append("X")
    if len(subparts)>1:
      if subparts[1]=="n": subparts[1]=-1
      parts.append("%s"%subparts[1])
      parts[0] = subparts[0]
    else:
      parts.append("%s"%len(parts[0]))
    if len(parts)==3: parts.insert(2,"")
    assert len(parts)==4, "Syntax error in word '%s'."%word
    varname = parts[1]
    if word.startswith("]:"):
      parts = [ "]" , word[2:] , "" , "1" ]
      listsizes.append(varcount)
      varcount=stack.pop()
      varnames=stack_varnames.pop()
    if varname=='directive':
      if parts[2]=="": directive = parts[0]
      else           : directive = parts[2]
    if varname=='set_option':
      if parts[2]=="": setoption = parts[0]+"_"
      else           : setoption = parts[2]+"_"
    if varname not in varnames:
      varnames[varname] = varcount
      if   (parts[0]=="%p"): varcount += 2
      elif (parts[0]=="%P"): varcount += 3
      else                 : varcount += 1
    elif (parts[0] in ["%p","%P"]): print "Danger in command %s: sharing position variable name with other variables of different lengths"%directive
    outnum = varnames[varname]
    parts.append("%s"%outnum)
    if word.startswith("]:"):
      initial = ""
      parts.append("%s"%listsizes[-1])
    else:
      initial = "@"
      parts.append("0")
    outline += initial + "@".join(parts) + " "
  f_c.write("%d %d "%(varcount,len(listsizes)))
  for i in listsizes: f_c.write("%d "%i)
  f_c.write("%s\\n\\\n"%outline)
  for i,j in varnames.iteritems():
   if i!="X":
    key = "PARSE_%s_%s%s"%(directive,setoption,sanitize(i))
    if (key in includeKeys) and (includeKeys[key]!=j): print "Repetition of key %s"%key
    includeKeys[key] = j
    f_h.write("#define %s %d\n"%(key,j))

# Finish up

f_h.write("""\n\n#endif"""); f_h.close()
f_c.write("""";\n"""); f_c.close()

